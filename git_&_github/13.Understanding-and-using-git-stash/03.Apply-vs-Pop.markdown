# ⚠️ Difference Between git stash apply vs git stash pop – 

## 📌 What’s the Difference?

Both `git stash apply` and `git stash pop` bring stashed changes back to your working directory, but they differ in what happens to the stash afterward:
- **`git stash apply`**: Restores the changes but keeps the stash in the stash list.
- **`git stash pop`**: Restores the changes and removes the stash from the list.

**Analogy**: Imagine you have a photo of your whiteboard notes in the hostel. `Apply` is like making a copy of the photo to work with while keeping the original. `Pop` is like using the photo and then throwing it away.

---

## 🛠 Commands: `git stash apply` vs `git stash pop`

### 1. `git stash apply`
Restores the specified stash (or latest, `stash@{0}`) to your working directory without deleting it.

**Syntax**:
```bash
git stash apply [stash@{n}]
```

**Example**:
1. Edit `notes.txt`, add "Study Git", stash: `git stash`.
2. List: `git stash list` (shows `stash@{0}`).
3. Apply: `git stash apply`.
4. Check: `git status` (shows restored changes).
5. List again: `git stash list` (stash still exists).

### 2. `git stash pop`
Restores the specified stash (or latest) and removes it from the stash list.

**Syntax**:
```bash
git stash pop [stash@{n}]
```

**Example**:
1. Edit `notes.txt`, add "Study HTML", stash: `git stash`.
2. List: `git stash list` (shows `stash@{0}`).
3. Pop: `git stash pop`.
4. Check: `git status` (shows restored changes).
5. List: `git stash list` (stash is gone).

### Key Difference
- **Apply**: Keeps the stash for reuse (e.g., apply to multiple branches).
- **Pop**: Deletes the stash, assuming you’re done with it.

---

## 🔍 Real-Life Analogy

Think of your hostel notebook:
- **Apply**: You photocopy a page to work on, keeping the original page safe.
- **Pop**: You tear out the page to work on, losing the original.

---

## 📚 Summary Table

| Command                | Restores Changes | Removes Stash? |
|------------------------|------------------|----------------|
| `git stash apply`      | Yes              | No             |
| `git stash pop`        | Yes              | Yes            |

---

## 🔧 Best Practices

- **Use `apply`** when you might need the stash again (e.g., testing changes on different branches).
- **Use `pop`** when you’re sure you’re done with the stash.
- **Check stashes** with `git stash list` before applying or popping.
- **Ensure a clean working directory** (`git status`) to avoid conflicts when applying/popping.

---

## 📝 Summary

- `git stash apply` restores changes and keeps the stash.
- `git stash pop` restores changes and deletes the stash.
- Choose based on whether you need to reuse the stash.

---

## 🏋️ Exercises and Assignments

### Exercise 1: Using `git stash apply`
**Objective**: Restore changes without losing the stash.

Step-by-step:
1. Create a repo `apply-pop-practice` with `git init`.
2. Add `study.txt` with "HTML basics", commit.
3. Edit `study.txt`, add "CSS basics", stash: `git stash`.
4. Check: `git stash list` (shows `stash@{0}`).
5. Apply: `git stash apply`.
   - **Explanation**: Restores "CSS basics" to `study.txt`.
6. Check: `git status` (shows modified `study.txt`).
7. List: `git stash list` (stash remains).

**Expected Learning**: See that `apply` keeps the stash.

### Exercise 2: Using `git stash pop`
**Objective**: Restore changes and remove the stash.

Step-by-step:
1. In `apply-pop-practice`, edit `study.txt`, add "JavaScript basics", stash: `git stash`.
2. Check: `git stash list` (shows two stashes).
3. Pop: `git stash pop`.
   - **Explanation**: Restores "JavaScript basics" and removes the stash.
4. Check: `git status` (shows modified `study.txt`).
5. List: `git stash list` (one fewer stash).

**Expected Learning**: Understand that `pop` deletes the stash.

### Assignment: Choosing Apply vs Pop
**Objective**: Decide when to use `apply` or `pop` in a project.

1. Create a repo `hostel-study` with `git init`.
2. Add `notes.txt` with "Study Plan", commit.
3. Edit `notes.txt`, add "Chapter 1", stash.
4. Edit `notes.txt`, add "Chapter 2", stash.
5. Use `git stash apply stash@{1}` to restore "Chapter 1".
6. Use `git stash pop` to restore "Chapter 2".
7. List stashes and confirm `stash@{1}` remains but `stash@{0}` is gone.
8. Write a note explaining why you used `apply` for one and `pop` for the other.

---
