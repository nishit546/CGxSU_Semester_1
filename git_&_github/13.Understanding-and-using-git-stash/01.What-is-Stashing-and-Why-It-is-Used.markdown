# ‚ö†Ô∏è What is Stashing and Why It is Used ‚Äì 

## üìå What is Git Stashing?

Git stashing is like putting your current work in a temporary drawer to keep your desk (working directory) clean so you can work on something else. It saves your uncommitted changes (both staged and unstaged) in a "stash" and reverts your working directory to match the last commit. Later, you can bring those changes back from the stash to continue working.

**Why Use It?**
- You‚Äôre working on a feature but need to switch to another task (e.g., fix a bug) without committing incomplete work.
- You want to pull new changes from a remote repository but have uncommitted changes that might cause conflicts.
- It‚Äôs a quick way to save your work without making a formal commit.

**Analogy**: Imagine you‚Äôre writing a study plan on a whiteboard in the CodingGita Hostel. Someone needs the whiteboard for a meeting, so you take a quick photo (stash) of your work, erase the board, and later restore your plan from the photo.

---

## üõ† Why is Stashing Important?

Stashing helps you:
- **Switch tasks quickly**: Work on urgent fixes without committing incomplete code.
- **Avoid messy commits**: Keep your commit history clean by saving temporary work.
- **Prevent conflicts**: Pull remote changes without mixing your uncommitted work.

### Example Scenario
You‚Äôre editing a file `notes.txt` for a hostel website but get a request to fix a bug on the `main` branch. You don‚Äôt want to commit your incomplete changes yet, so you stash them, switch branches, fix the bug, and later bring your changes back.

---

## üîç Real-Life Analogy

Think of stashing as putting your half-cooked meal in the hostel kitchen fridge because someone needs the stove. You can finish cooking later without starting over.

---

## üìö Summary Table

| Concept         | Description                                      |
|-----------------|--------------------------------------------------|
| Git Stash       | Temporarily saves uncommitted changes             |
| Purpose         | Switch tasks, avoid conflicts, keep history clean |

---

## üîß Best Practices

- **Use stashing for short-term pauses**: Stashes are temporary; commit important work for long-term storage.
- **Check status before stashing**: Use `git status` to see what changes will be stashed.
- **Label stashes** (covered later) to remember what they contain.
- **Don‚Äôt overuse stashing**: Commit or branch if you plan to keep changes long-term.

---

## üìù Summary

- Stashing saves uncommitted changes temporarily, like a quick save in a game.
- It‚Äôs used to switch tasks, pull changes, or avoid messy commits.
- Stashes are stored in a list and can be brought back or deleted later.

---

## üèãÔ∏è Exercises and Assignments

### Exercise 1: Understanding Stashing with a Simple Change
**Objective**: Learn what changes are stashed and how the working directory is cleaned.

Step-by-step:
1. Create a folder `stash-practice` and initialize a Git repo: `git init`.
   - **Explanation**: `git init` creates a new Git repository to track files.
2. Create a file `todo.txt` with "Task 1: Study HTML".
3. Add and commit: `git add todo.txt` and `git commit -m "Initial todo"`.
   - **Explanation**: `git add` stages the file, and `git commit` saves it permanently.
4. Edit `todo.txt`, add "Task 2: Study Git", and save (don‚Äôt commit).
5. Check status: `git status`.
   - **Explanation**: Shows `todo.txt` as modified but uncommitted.
6. Stash changes: `git stash`.
   - **Explanation**: Saves changes to a stash and reverts `todo.txt` to the last commit.
7. Check status again: `git status`.
   - **Expected Output**: No changes (clean working directory).
8. View the stash list: `git stash list`.
   - **Expected Output**: Shows a stash entry like `stash@{0}: WIP on main: ...`.

**Expected Learning**: Understand that stashing saves changes and cleans the working directory.

### Exercise 2: Simulating a Task Switch
**Objective**: Use stashing to pause and resume work.

Step-by-step:
1. In `stash-practice`, edit `todo.txt` to add "Task 3: Study CSS".
2. Check status: `git status` (shows modified `todo.txt`).
3. Stash changes: `git stash`.
4. Create a new file `bug.txt` with "Fix homepage bug" and commit it: `git add bug.txt` and `git commit -m "Fix bug"`.
   - **Explanation**: Simulates working on an urgent task.
5. Check stash list: `git stash list`.
6. Verify `todo.txt` is unchanged (only has "Task 1").

**Expected Learning**: See how stashing lets you switch tasks without committing.

### Assignment: Stashing in a Hostel Project
**Objective**: Apply stashing in a mini-project scenario.

1. Create a repo `hostel-website` with `git init`.
2. Add `index.html` with `<h1>CodingGita Hostel</h1>`, commit it.
3. Edit `index.html` to add `<p>Welcome to our site!</p>` but don‚Äôt commit.
4. Stash the changes with `git stash`.
5. Create `bugfix.txt`, commit it as a bug fix.
6. Check `git status` to confirm a clean working directory.
7. List stashes with `git stash list`.
8. Write a short note explaining why you stashed changes instead of committing.


---
