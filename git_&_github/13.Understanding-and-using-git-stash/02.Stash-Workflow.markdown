# ⚠️ Stash Workflow (Save, List, Apply, Drop, Clear) – 

## 📌 What is the Stash Workflow?

The stash workflow involves a set of Git commands to manage your stashed changes: saving them, listing them, applying them back, dropping specific stashes, or clearing all stashes. It’s like managing a stack of photos in your hostel room—save a photo, check what’s in the stack, use one, or throw some away.

---

## 🛠 Commands in the Stash Workflow

### 1. Save Changes: `git stash` or `git stash save`
Saves your uncommitted changes (staged and unstaged) to a stash and reverts your working directory to the last commit.

**Syntax**:
```bash
git stash
# or
git stash save
```

**Example**:
You’re editing `notes.txt` but need to switch tasks.
1. Check changes: `git status` (shows modified `notes.txt`).
2. Stash: `git stash`.
   - **Output**: `Saved working directory and index state WIP on main: ...`.
3. Check: `git status` (clean working directory).

### 2. List Stashes: `git stash list`
Shows all stashes in your repository, numbered like `stash@{0}`, `stash@{1}`, etc.

**Syntax**:
```bash
git stash list
```

**Example**:
After stashing twice:
```bash
git stash list
```
**Output**:
```
stash@{0}: WIP on main: abc1234 Add notes
stash@{1}: WIP on main: def5678 Initial commit
```

### 3. Apply a Stash: `git stash apply`
Brings back the changes from a stash (default: latest, `stash@{0}`) to your working directory without removing the stash.

**Syntax**:
```bash
git stash apply [stash@{n}]
```

**Example**:
1. List stashes: `git stash list`.
2. Apply latest: `git stash apply`.
   - Restores changes to `notes.txt`.
3. Check: `git status` (shows restored changes).

### 4. Drop a Stash: `git stash drop`
Removes a specific stash (default: latest) from the stash list.

**Syntax**:
```bash
git stash drop [stash@{n}]
```

**Example**:
1. List: `git stash list` (shows `stash@{0}`).
2. Drop: `git stash drop stash@{0}`.
   - **Output**: `Dropped stash@{0}`.
3. Check: `git stash list` (shows one fewer stash).

### 5. Clear All Stashes: `git stash clear`
Deletes all stashes in the repository.

**Syntax**:
```bash
git stash clear
```

**Example**:
1. List: `git stash list` (shows multiple stashes).
2. Clear: `git stash clear`.
3. Check: `git stash list` (empty).

---

## 🔍 Real-Life Analogy

Imagine you’re juggling multiple hostel tasks (notes, posters, menus) on your desk. You:
- **Save**: Put a task in a drawer (stash).
- **List**: Check what’s in the drawer.
- **Apply**: Take a task out to work on it, keeping the drawer copy.
- **Drop**: Throw out one task.
- **Clear**: Empty the drawer completely.

---

## 📚 Summary Table

| Command                | Purpose                                      |
|------------------------|----------------------------------------------|
| `git stash`            | Saves uncommitted changes to a stash         |
| `git stash list`       | Lists all stashes                            |
| `git stash apply`      | Restores a stash’s changes to working directory |
| `git stash drop`       | Removes a specific stash                     |
| `git stash clear`      | Deletes all stashes                          |

---

## 🔧 Best Practices

- **Check status first**: Use `git status` to confirm what you’re stashing.
- **List stashes regularly**: Use `git stash list` to track saved work.
- **Apply carefully**: Ensure your working directory is clean to avoid conflicts.
- **Don’t keep stashes forever**: Apply or commit changes when ready to keep your stash list manageable.

---

## 📝 Summary

- The stash workflow involves saving (`git stash`), listing (`git stash list`), applying (`git stash apply`), dropping (`git stash drop`), and clearing (`git stash clear`) changes.
- It’s like managing temporary notes in a hostel project—save them, check them, use them, or discard them.

---

## 🏋️ Exercises and Assignments

### Exercise 1: Basic Stash Workflow
**Objective**: Practice saving, listing, and applying a stash.

Step-by-step:
1. Create a repo `workflow-practice` with `git init`.
   - **Explanation**: Initializes a new Git repository.
2. Add `tasks.txt` with "Task 1", commit: `git add tasks.txt` and `git commit -m "Initial task"`.
   - **Explanation**: Stages and saves the file permanently.
3. Edit `tasks.txt`, add "Task 2", save but don’t commit.
4. Stash: `git stash`.
   - **Explanation**: Saves changes and cleans the directory.
5. Check: `git status` (should be clean).
6. List: `git stash list` (shows `stash@{0}`).
7. Apply: `git stash apply`.
   - **Explanation**: Restores "Task 2" to `tasks.txt`.
8. Check: `git status` (shows modified `tasks.txt`).

**Expected Learning**: Understand the core stash workflow.

### Exercise 2: Managing Multiple Stashes
**Objective**: Work with multiple stashes, drop one, and clear all.

Step-by-step:
1. In `workflow-practice`, edit `tasks.txt` to add "Task 3", stash: `git stash`.
2. Edit again, add "Task 4", stash: `git stash`.
3. List: `git stash list` (shows two stashes).
4. Drop the oldest: `git stash drop stash@{1}`.
   - **Explanation**: Removes the specified stash.
5. List: `git stash list` (shows one stash).
6. Clear all: `git stash clear`.
   - **Explanation**: Deletes all stashes.
7. List: `git stash list` (should be empty).

**Expected Learning**: Manage multiple stashes and clean up.

### Assignment: Stash Workflow in a Project
**Objective**: Simulate a real project with multiple stashes.

1. Create a repo `hostel-planner` with `git init`.
2. Add `plan.txt` with "Study Session", commit.
3. Edit `plan.txt` to add "Break Time", stash.
4. Add `events.txt` with "Movie Night", commit.
5. Edit `events.txt` to add "Game Night", stash.
6. List stashes and apply the first one (`stash@{1}`).
7. Drop the second stash and clear all.
8. Write a note explaining the workflow and why you dropped/cleared stashes.


---
